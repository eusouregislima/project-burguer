const express = require('express') // importando o express
const uuid = require('uuid') // importando uuid para gerar ids
const app = express() // uma constante app para guardar o express
const port = 3001 // abri essa constante para a porta para o caso de eu precisar trocar o numero da porta
app.use(express.json()) // avisando o express que vou usar por padrÃ£o o json


const burguerOrders = [] // criando a contante para todos os pedidos


const checkId = (request, response, next) =>{ //checagem de id
    const {id} = request.params // buscando o id no params

    const index = burguerOrders.findIndex(index => index.id === id) 
    // verificando a posiÃ§Ã£o do usuÃ¡rio no array
    //verificando se o id enviado retorna um nÃºmero maior que zero
    // se retorna -1 Ã© pq nÃ£o foi encontrado

    if(index<0) { // Esse caso Ã© se nÃ£o for encontrado
        return response.status(404).json({message: "User not found."})
    }

    userId = id // id do usuÃ¡rio
    userIndex = index //posiÃ§Ã£o do usuÃ¡rio dentro do array

    next() // seguindo
}

// Criando um meddleware que imprima o tipo da requisiÃ§Ã£o e a url da requisiÃ§Ã£o
const methodUrl = (request, response, next) => {
    const method = request.method 
    const url = request.path // path significa caminho

    console.log(`Method:${method} URL: ${url}`) //Imprimindo

    next() // seguindo
}


app.get('/users', methodUrl, (request, response) => { // essa rota me entrega todos os pedidos, url e mÃ©todo
    return response.json(burguerOrders) // respondendo com os dados de todos os pedidos
})


app.post('/users', methodUrl, (request, response) => { // aqui estou enviando dados para o navegador
    const {order, name, value} = request.body // parte que eu digito
    const requestBurguer = {id: uuid.v4(), order, name, value, status: "Em preparaÃ§Ã£o"} // criando o meu usuÃ¡rio. uuid cria o id, o resto vem pelo body
    
    burguerOrders.push(requestBurguer) // inserindo os dados no array principal
    return response.status(201).json(requestBurguer) // adicionei o status 201 que Ã© de informaÃ§Ã£o adicionada
})


app.put('/users/:id', checkId, methodUrl, (request, response) => { // busquei pelo id, chequei e imprime url e metodo
    //primeiro ele vai executar a checkId - estando ok, vem para cÃ¡
    const { id } = request.params
    const { order, name, value,} = request.body
    const changeRequest = {id, order, name, value, status: "Em preparaÃ§Ã£o"} // criando meu usuÃ¡rio

    
    burguerOrders[userIndex] = changeRequest // Se ele encontrar, vai ser trocado pelos dados enviados.

    return response.json(changeRequest) // retorna somente o usuÃ¡rio modificado
})


app.delete('/users/:id', checkId, methodUrl, (request, response) => { 
  
    burguerOrders.splice(userIndex,1) //somente apaga a posiÃ§Ã£o encontrada

    return response.status(204).json() //204 Ã© status de sem conteÃºdo
})


app.get('/users/:id', checkId, methodUrl, (request, response) => { 
    
    const index = userIndex //posiÃ§Ã£o do usuÃ¡rio no array
        
    return response.json(burguerOrders[index]) 
})


app.patch('/users/:id', checkId, methodUrl, (request, response) => { //atualizando parcialmente
    const index = userIndex
   
    burguerOrders[index].status = "Pronto"
 
    return response.json(burguerOrders[index])
    
})


app.listen(3001, ()=>{ // aqui estou acessando a minha porta e imprimindo o start do servidor
    console.log(`ğŸš€ Server started on port ${port}`) // mensagem de status
}) // porta 3000 Ã© usada para aplicaÃ§Ãµes node



